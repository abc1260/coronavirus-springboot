Refactor Code Using Utilility Class To Read Data
-------------------------------------------------------------------------------
Create a CoronaVirusUtil class as utility class. It will contain a static method:

package com.aikiinc.coronavirus.utility;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Optional;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVRecord;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.aikiinc.coronavirus.data.CoronaVirusDataException;
import java.net.URL;

public class CoronaVirusUtil {
	private static Logger LOG = LoggerFactory.getLogger(CoronaVirusUtil.class);

	public static Optional<Iterable<CSVRecord>> readData(URL dataUrl) throws CoronaVirusDataException {
		Optional<Iterable<CSVRecord>> records = Optional.empty();

		BufferedReader br = null;
		try {
			br = new BufferedReader(new InputStreamReader(dataUrl.openStream()));

			// Get the iterable records
			Iterable<CSVRecord> trecords = CSVFormat.DEFAULT.withFirstRecordAsHeader().withIgnoreEmptyLines().parse(br);
			records = Optional.of(trecords);
		} catch (Exception e) {
			LOG.warn("Data was NOT read from: " + dataUrl);
			
			throw new CoronaVirusDataException(e);
		} finally {
			try {
				if (br != null)
					br.close();
			} catch (IOException e) {
			}
		}

		return records;
	}

}


Test Refactoring Code Using Utilility Class To Read Data
-------------------------------------------------------------------------------
package com.aikiinc.coronavirus.utility;

import java.net.URL;
import java.util.Optional;

import org.apache.commons.csv.CSVRecord;
import org.junit.Assert;
import org.junit.jupiter.api.Test;

import com.aikiinc.coronavirus.data.CoronaVirusDataException;

class CoronaVirusUtilTest {

	@Test
	void readData() {
		String CORONAVIRUS_DATA = "coronavirus.data";
		URL dataUrl = CoronaVirusUtilTest.class.getClassLoader().getResource(CORONAVIRUS_DATA);

		try {
			Optional<Iterable<CSVRecord>> records = CoronaVirusUtil.readData(dataUrl);
			if (records.isPresent()) {
				Assert.assertTrue(records.get().iterator().hasNext());

//				try {
//					records.get().forEach(e -> System.out.println(e));
//				} catch (Exception e) {
//				}
			} else
				Assert.fail("No CSVRecord was read");

		} catch (CoronaVirusDataException e) {
			Assert.fail(e.getMessage());
		}
	}

}

Run test and it is reading the local data file.



Use The Utility Class To Read Local Data: CoronaVirusLocalData.java
-------------------------------------------------------------------------------
public class CoronaVirusLocalData {
	private Logger log = LoggerFactory.getLogger(CoronaVirusLocalData.class);
	private static final String CORONAVIRUS_DATA = "coronavirus.data";
	private URL localUrl = CoronaVirusLocalData.class.getClassLoader().getResource(CORONAVIRUS_DATA);

	public Optional<Iterable<CSVRecord>> readData() throws CoronaVirusDataException {
		log.info("Read local data from: " + localUrl);

		return CoronaVirusUtil.readData(localUrl);
	}

}

* Explained
------------------
Look how simpler, lighter the class becomes. Great!



Use The Utility Class To Read Local Data: CoronaVirusRemoteData.java
-------------------------------------------------------------------------------
public class CoronaVirusRemoteData {
    .
    .

	public Optional<Iterable<CSVRecord>> readData() throws CoronaVirusDataException {
		log.info("Read remote data from:  " + remoteUrl);

		return CoronaVirusUtil.readData(remoteUrl);
	}

}

* Explained
------------------
Look how simpler, lighter the class becomes. Great!



Rerun Tests To Validate
-------------------------------------------------------------------------------
All will behave as the same.


