Reading Local Data In CoronaVirusLocalData.java
--------------------------------------------------------------------------------
Here is the complete implementation:

public class CoronaVirusLocalData {
	private Logger log = LoggerFactory.getLogger(CoronaVirusLocalData.class);
	private static final String CORONAVIRUS_DATA = "coronavirus.data";
	private URL localUrl = CoronaVirusLocalData.class.getClassLoader().getResource(CORONAVIRUS_DATA);

	Optional<Iterable<CSVRecord>> readLocaData() throws Exception {
		log.info("Read local data from: " + localUrl);
		Optional<Iterable<CSVRecord>> records = Optional.empty();

		BufferedReader br = null;
		try {
			br = new BufferedReader(new InputStreamReader(localUrl.openStream()));

			// Get the iterable records
			Iterable<CSVRecord> trecords = CSVFormat.DEFAULT.withFirstRecordAsHeader().withIgnoreEmptyLines().parse(br);
			records = Optional.of(trecords);
		} catch (IOException e) {
			log.warn("Local data was NOT read from: " + localUrl);
			throw new Exception(e);
		} finally {
			try {
				if (br != null)
					br.close();
			} catch (IOException e) {
			}
		}
		return records;
	}

}


* Explained
-------------------
Return a non null Iterable object of CSVRecord.
	Optional<Iterable<CSVRecord>>

Initialize a non empty iterable:
	Optional<Iterable<CSVRecord>> records = Optional.empty();

Read the data from the local file (src/resources/coronavirus.data) as an input stream:
	new InputStreamReader(localUrl.openStream())

Buffer reading the data:
		br = new BufferedReader(new InputStreamReader(localUrl.openStream()));

Use the Reading Apache Commons CSV - CSVFormat to read first record as Header:
	CSVFormat.DEFAULT.withFirstRecordAsHeader()

Ignore Empty Lines:	
		.withIgnoreEmptyLines()
		
Use the BufferedReader to stream data:
		.parse(br);

Return an Optional value for the read CSV records:		
		records = Optional.of(trecords);

Do the norma exception handling:
	} catch (IOException e) {
		log.warn("Local data was NOT read from: " + localUrl);
		throw new Exception(e);
	} finally {
		try {
			if (br != null)
				br.close();
		} catch (IOException e) {
		}
	}

Finally return the read records	
	return records;


